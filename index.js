import dotenv from 'dotenv';
import { google } from 'googleapis';
import fetch from 'node-fetch';
import { Readable } from 'stream';
import { Markup, Telegraf } from 'telegraf';
dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

const auth = new google.auth.GoogleAuth({
  keyFile: 'credentials.json',
  scopes: ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/spreadsheets'],
});
const drive = google.drive({ version: 'v3', auth });
const sheets = google.sheets({ version: 'v4', auth });

const SPREADSHEET_ID = process.env.SHEET_ID;
const FOLDER_ID = process.env.DRIVE_FOLDER_ID;

const sessionMap = new Map(); // chatId ‚Üí { lastRow, lastFileLink }

const sequenceMap = {
  1: '‚ë†', 2: '‚ë°', 3: '‚ë¢', 4: '‚ë£', 5: '‚ë§',
  6: '‚ë•', 7: '‚ë¶', 8: '‚ëß', 9: '‚ë®', 10: '‚ë©',
  11: '‚ë™', 12: '‚ë´', 13: '‚ë¨', 14: '‚ë≠', 15: '‚ëÆ',
  16: '‚ëØ', 17: '‚ë∞', 18: '‚ë±', 19: '‚ë≤', 20: '‚ë≥',
};

function getColumnLetter(category) {
  return {
    description: 'B',
    emotion: 'C',
    thought: 'D',
  }[category];
}

async function uploadToDrive(buffer, filename) {
  const fileMetadata = { name: filename, parents: [FOLDER_ID] };
  const media = {
    mimeType: 'audio/ogg',
    body: Readable.from(buffer)
  };

  const res = await drive.files.create({
    resource: fileMetadata,
    media,
    fields: 'id',
  });

  return `https://drive.google.com/file/d/${res.data.id}/view`;
}

bot.start((ctx) =>
  ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.', Markup.keyboard([['‚ûï New Entry']]).resize())
);

bot.hears('‚ûï New Entry', async (ctx) => {
  const date = new Date().toISOString();
  const res = await sheets.spreadsheets.values.append({
    spreadsheetId: SPREADSHEET_ID,
    range: 'Sheet1!A:D',
    valueInputOption: 'RAW',
    requestBody: {
      values: [[date, '', '', '']],
    },
  });
  const rowIndex = res.data.updates.updatedRange.match(/\d+$/)[0];
  sessionMap.set(ctx.chat.id, { lastRow: rowIndex });

  ctx.reply('üîÑ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ù–∞–¥—ñ—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–µ, –∞ –ø–æ—Ç—ñ–º –≤–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.');
});

bot.on('voice', async (ctx) => {
  const chatId = ctx.chat.id;
  if (!sessionMap.has(chatId)) {
    return ctx.reply('‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ "‚ûï New Entry", —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.');
  }

  const file = await ctx.telegram.getFile(ctx.message.voice.file_id);
  const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
  const response = await fetch(fileUrl);
  const buffer = await response.buffer();

  const filename = `voice-${Date.now()}.ogg`;
  const driveLink = await uploadToDrive(buffer, filename);

  sessionMap.set(chatId, {
    ...sessionMap.get(chatId),
    lastFileLink: driveLink,
  });

  ctx.reply('üì• –ì–æ–ª–æ—Å–æ–≤–µ –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', Markup.inlineKeyboard([
    [Markup.button.callback('üìÑ Description', 'description')],
    [Markup.button.callback('üò¢ Emotion', 'emotion')],
    [Markup.button.callback('üí≠ Thought', 'thought')],
  ]));
});

bot.action(['desc', 'emotion', 'thought'], async (ctx) => {
  const chatId = ctx.chat.id;
  const session = sessionMap.get(chatId);
  if (!session || !session.lastRow || !session.lastFileLink) {
    return ctx.reply('‚ùóÔ∏è –ù–µ–º–∞—î –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.');
  }

  const column = getColumnLetter(category);
  const startRow = Number(session.lastRow);

  let row = startRow;
  let index = 1;

  while (true) {
    const cell = `${column}${row}`;
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `Sheet1!${cell}`,
    });

    if (!res.data.values || !res.data.values.length || !res.data.values[0][0]) break;

    row++;
    index++;
    if (index > 20) break;
  }

  const symbol = sequenceMap[index] || `${index})`;
  const content = `${symbol} üé§ ${session.lastFileLink}`;

  await sheets.spreadsheets.values.update({
    spreadsheetId: SPREADSHEET_ID,
    range: `Sheet1!${column}${row}`,
    valueInputOption: 'RAW',
    requestBody: {
      values: [[content]],
    },
  });

  sessionMap.set(chatId, {
    lastRow: session.lastRow,
  });

  ctx.editMessageText('‚úÖ –ì–æ–ª–æ—Å–æ–≤–µ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.');
});

bot.launch();
